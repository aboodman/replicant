(db) sync(source, remoteSpec):
    remote = load(remoteSpec)
    sourceHead = source.head
    push(sourceHead, remote)
    remoteHead = remote.handleSync(source.head, NewCache(source.head)) # will eventually be behind an rpc
    push(remoteHead, db.noms)
    db.setHead("remote", remoteHead) # mainly just to prevent it from getting gc'd if next step fails and for debugging
    rebased = rebase(db.noms, db.head, remoteHead)
    db.setHead("local", rebased)

validate(db, knownValid, commit) error
  if knownValid.Contains(commit):
    return nil

  for c := range commit.Parents():
    err := validate(db, knownValid, c)
    if err != nil:
      return err

  var replayed Commit
  switch commit.Type():
    case Tx:
      bundle, data := db.executeImpl(commit.Basis(), commit.Origin, commit.Bundle, commit.Name, commit.Args, commit.Date)
      replayed = makeTxCommit(commit.Basis(), commit.Origin, commit.Bundle, commit.Name, commit.Args, commit.Date, bundle, data)
      break
    case Reorder:
      target := getTarget(commit)
      bundle, data := db.executeImpl(commit.Basis(), commit.Origin, target.Bundle, target.Name, target.Args, commit.Date)
      replayed = makeReorderCommit(commit.Basis(), commit.Origin, target, commit.Date, bundle, data)
      break
    case Reject:
      target := commit.Target()
      bundle, data := target.Value.Bundle, target.Value.Data
      replayed = makeRejectCommit(commit.Basis(), commit.Origin, target, commit.Reason, bundle, data)
      break
    case Genesis:
      replayed = makeGenesisCommit()
      break

  if !commit.Equals(replayed):
    return fmt.Errorf("Invalid commit %s - should be: %s")
  
  knownValid.Add(commit)
  return nil

(db) handleSync(commit, cache):
  err := validate(db, cache.Clone(), commit) # clone because don't want rebase below to see the valid set items added
  if err != nil:
    return err

  rebased, err := rebase(db, commit, db.head, cache)
  if err != nil:
    return err
  
  err = db.setHead(rebased)
  if err != nil:
    return err

  return rebased, nil


// rebases `commit` onto `basis`
// commits that are already at the correct basis are a no-op
rebase(vrw, commit, basis) Commit:
  if basis.canReach(commit):
    return commit
  
  newBasis := rebase(vrw, commit.Basis(), basis)
  var newCommit Commit
  d := datetime.Now()

  if newBasis.Equals(commit.Basis()):
    return commit

  switch commit.Type():
    case Tx:
      bundle, data := db.executeImpl(newBasis, commit.Bundle, commit.Name, commit.Args, d)
      newCommit = makeReorderCommit(newBasis, db.Origin, commit, d)

    case Reorder:
      target := getTarget(commit)
      bundle, data := db.executeImpl(mewBasis, target.Bundle, target.Name, target.Args, d)
      newCommit = makeReorderCommit(newBasis, db.Origin, commit, d)

    default:
      return Commit{}, fmt.Errorf("Cannot rebase commit of type %s: %s", commit.Type(), types.EncodedValue(commit))

  return newCommit, nil

getReorderTarget(commit) Commit, error:
  for:
    switch commit.Type():
      case Tx:
        return commit, nil
      case Reorder:
        commit = commit.Target
      default:
        return Commit{}, fmt.Errorf("Unexpected reorder target of type %s: %s", commit.Type(), types.EncodedValue(commit))
  }
