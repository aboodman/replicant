/**
 * Sample React Native App
 *
 * adapted from App.js generated by the following command:
 *
 * react-native init example
 *
 * https://github.com/facebook/react-native
 */
 
import React, { Component } from 'react';
import {
  StyleSheet,
  Text,
  View,
  FlatList,
  Button,
  TextInput,
  Keyboard,
  Image
} from "react-native";
import Replicant from 'replicant-react-native';

const viewPadding = 10;

export default class App extends Component {
  state = {
    root: '',
    text: "",
    todos: [],
  };

  changeTextHandler = text => {
    this.setState({ text: text });
  };

  // calculates the order field by halving the distance between the left and right neighbor orders.
  getNewOrder = index => {
    const todos = this.state.todos;
    const minOrderValue = 0;
    const maxOrderValue = Number.MAX_VALUE;
    const leftNeighborOrder = index == 0 ? minOrderValue : todos[index-1].value.order;
    const rightNeighborOrder = index == todos.length ? maxOrderValue : todos[index].value.order;
    const order = leftNeighborOrder + ((rightNeighborOrder - leftNeighborOrder)/2);
    return order;
  }

  deleteTodo = async (key) => {
    if (key != null) {
      await this._replicant.exec('deleteTodo', [key]);
      this.load();
    }
  };

  setTextDecorationLine(isDone) {
    let textDecoration = 'none';
    if (isDone) textDecoration = 'line-through';

    return textDecoration;
  }

  handleDone = async (key, prevDone) => {
    if (key != null) {
      let isDone = !prevDone;
      await this._replicant.exec('setDone', [key, isDone]);
      this.load();
    }
  };

  addTodo = async () => {
    let todos = this.state.todos;
    let text = this.state.text;
    let notEmpty = text.trim().length > 0;

    if (notEmpty) {
      const uid = await this._replicant.exec('uid'); //Math.floor(Math.random() * 1000);
      const index = todos.length == 0 ? 0 : todos.length;
      const order = this.getNewOrder(index);
      const done = false;
      await this._replicant.exec('addTodo', [uid, text, order, done]);
      this.load();
    }

    // clear textinput field after todo has been added
    this.setState({
      text: "",
    });
    
    // set focus to textInput box after text has been submitted
    this.refs.addTodoTextInput.focus();
  }

  load = async () => {
    let todos = await this._replicant.exec('getAllTodos');   
    
    // sort todos by order field
    todos.sort(function(a, b){return a.value.order - b.value.order});
    
    this.setState({
      todos,
    });
  }

  async componentDidMount() {
    this._replicant = new Replicant('https://replicate.to/serve/react-native-test');
    await this._initBundle();

    this._replicant.onChange = this.load;

    const root = await this._replicant.root();
    this.setState({
      root,
    });

    this.load();
  
    Keyboard.addListener(
      "keyboardWillShow",
      e => this.setState({ viewPadding: e.endCoordinates.height + viewPadding })
    );

    Keyboard.addListener(
      "keyboardWillHide",
      () => this.setState({ viewPadding: viewPadding })
    );
  }

  async _handleSync() {
    const result = this._replicant.sync('https://replicate.to/serve/react-native-test');
    console.log('Sync result was', result);
  }

  async _initBundle() {
    const resource = require('./replicant.bundle');
    const resolved = Image.resolveAssetSource(resource);
    await this._replicant.putBundle(await (await fetch(resolved.uri)).text());
  }

  render() {
    return (
      <View style={[styles.container, { paddingBottom: this.state.viewPadding }]}>
        <TextInput
          ref="addTodoTextInput"
          style={styles.textInput}
          onChangeText={this.changeTextHandler}
          onSubmitEditing={this.addTodo}
          value={this.state.text}
          placeholder="Add Tasks"
          returnKeyType="done"
          returnKeyLabel="done"
          autoFocus={true}
          autoCorrect={false}

        />
        <FlatList
          style={styles.list}
          data={this.state.todos}
          keyExtractor={item => item.id}
          renderItem={({ item }) =>
            <View key={item.id}>
              <View style={styles.listItemCont}>
                <Text style={[styles.listItem, { textDecorationLine: this.setTextDecorationLine(item.value.done)}]}
                  onPress={() => this.handleDone(item.id, item.value.done)} >
                  {item.value.title}
                </Text>
              <Button title="X" onPress={() => this.deleteTodo(item.id)} />
              </View>
              <View style={styles.hr} />
            </View>}
        />
      </View>
    );
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: "#F5FCFF",
    padding: viewPadding,
    paddingTop: 50
  },
  list: {
    width: "100%"
  },
  listItem: {
    paddingTop: 10,
    paddingBottom: 10,
    fontSize: 14,
    color: "#333333",
  },
  hr: {
    height: 1,
  },
  listItemCont: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "space-between"
  },
  textInput: {
    height: 40,
    paddingRight: 10,
    paddingLeft: 10,
    borderColor: "#AAAAAA",
    borderWidth: 1,
    width: "100%"
  },
});
